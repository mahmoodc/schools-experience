pool:
  vmImage: 'ubuntu-16.04'

variables:
  imageName: school-experience
  imageTag: v$(Build.BuildId)
  POSTGRES_IMAGE: mdillon/postgis:11-alpine
  # define three more variables dockerId, dockerPassword and dockerRegistry in the build pipeline in UI
  POSTGRESS_PASSWORD: secret
  DATABASE_URL: postgis://postgres:secret@postgres/school_experience_test
  WEB_URL: postgis://postgres:secret@postgres/school_experience
  SECRET_KEY_BASE: stubbed
  REDIS_IMAGE: redis:5-alpine
  REDIS_URL: redis://redis:6379/1
  CUCUMBER_PROFILE: continuous_integration

steps:
  - script: docker login $(dockerRegistry) -u $(dockerId) -p $pswd
    env:
      pswd: $(dockerPassword)
    displayName: 'Docker login'
  
  - script: docker pull $(dockerRegistry)/$(imageName):latest || true
    displayName: Retrieve latest Docker build to use as cache
    condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'),ne(variables['Build.SourceBranch'], 'refs/heads/phase2'))

  - script: docker build -f Dockerfile --cache-from=$(dockerRegistry)/$(imageName):latest -t $(dockerRegistry)/$(imageName):$(imageTag) .
    displayName: Build Docker Image using Cache
    condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'),ne(variables['Build.SourceBranch'], 'refs/heads/phase2'))

  - script: docker build -f Dockerfile -t $(dockerRegistry)/$(imageName):$(imageTag) .
    displayName: Build Docker Image without Cache
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/phase2'))

  - script: docker tag $(dockerRegistry)/$(imageName):$(imageTag) $(imageName):latest
    displayName: Tag as latest

  - script: docker-compose up -d postgres redis
    displayName: bring up postgres, redis and create database

  - script: docker-compose run --rm -e DATABASE_URL -e REDIS_URL -e RAILS_ENV=test school-experience rake db:create db:test:prepare
    displayName: Create Testing databases, import schema and fixtures

  - script: docker-compose run --rm -e DATABASE_URL -e REDIS_URL -e RAILS_ENV=test school-experience rspec
    displayName: Run the Specs

  - script: docker-compose run --rm -e DATABASE_URL -e REDIS_URL -e RAILS_ENV=test -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true school-experience cucumber --profile=continuous_integration
    displayName: Run the Cucumber features

  - script: docker-compose run --rm -e DATABASE_URL -e REDIS_URL -e RAILS_ENV=test school-experience brakeman --no-pager
    displayName: Run the Brakeman security scan

  - script: docker-compose run --rm -e DATABASE_URL="$WEB_URL" -e REDIS_URL -e SECRET_KEY_BASE=stubbed school-experience rake db:create db:schema:load
    displayName: Create Smoketest database and import schema

  - script: docker-compose up -d school-experience
    displayName: Spin up app

  - script: sleep 15 # ugly but gives the web app time to boot
    displayName: Pause to allow app to boot

  - script: docker ps | grep smoketest | grep '(healthy)' || false
    displayName: Check app reports as Healthy

  - script: docker-compose run --rm -e DATABASE_URL -e REDIS_URL -e RAILS_ENV=test school-experience govuk-lint-ruby app lib spec
    displayName: Run the GovUK Lint check

  - script: docker-compose -d -f docker-compose-selenium.yml up
    displayName: spin up selenium nodes

  - script: docker-compose run --rm -e RAILS_ENV=test -e SELENIUM_HUB_HOSTNAME=selenium-chrome -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e APP_URL='http://school-experience:3000' school-experience cucumber
    condition: not(or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/phase2')))
    displayName: Run Cucumber via Selenium Chrome

  - script: docker-compose run --rm -e RAILS_ENV=test -e SELENIUM_HUB_HOSTNAME=selenium-chrome -e DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true -e APP_URL='http://school-experience:3000' -e CUC_DRIVER=firefox school-experience cucumber
    condition: not(or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/phase2')))
    displayName: Run Cucumber via Selenium Firefox

  - script: |
      docker push $(dockerRegistry)/$(imageName):$(imageTag)
      docker tag $(dockerRegistry)/$(imageName):$(imageTag) $(dockerRegistry)/$(imageName):latest
      docker push $(dockerRegistry)/$(imageName):latest
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: 'Push Docker image (built from master)'

  - script: |
      docker tag $(dockerRegistry)/$(imageName):$(imageTag) $(dockerRegistry)/$(imageName):$(imageTag)-phase2
      docker push $(dockerRegistry)/$(imageName):$(imageTag)-phase2
      docker tag $(dockerRegistry)/$(imageName):$(imageTag) $(dockerRegistry)/$(imageName):phase2
      docker push $(dockerRegistry)/$(imageName):phase2
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/phase2')
    displayName: 'Push Docker image (built from phase2)'

  - task: CopyFiles@2
    inputs:
      contents: 'script/compose-school-experience.sh'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: 'Copy Docker Compose file to staging area'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/script/compose-school-experience.sh
      artifactName: 'compose-file'
    displayName: 'Publish the Docker Compose file'
